// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Product.Infrastructure.Database.DbContext;

#nullable disable

namespace Product.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20240829131804_Product")]
    partial class Product
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Product")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Product.Core.Domain.ClientFeedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<string>>("ProductAdvantages")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("ProductDisadvantages")
                        .HasColumnType("text[]");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductModelId")
                        .HasColumnType("uuid");

                    b.Property<double>("Raiting")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductModelId");

                    b.ToTable("ClientFeedbacks", "Product");
                });

            modelBuilder.Entity("Product.Service.Core.Domain.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductModelId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductModelId");

                    b.ToTable("Images", "Product");
                });

            modelBuilder.Entity("Product.Service.Core.Domain.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Characteristics")
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PrBrutto")
                        .HasColumnType("double precision");

                    b.Property<double>("PrNetto")
                        .HasColumnType("double precision");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products", "Product");
                });

            modelBuilder.Entity("Product.Core.Domain.ClientFeedback", b =>
                {
                    b.HasOne("Product.Service.Core.Domain.ProductModel", null)
                        .WithMany("ClientFeedbacks")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("Product.Service.Core.Domain.Image", b =>
                {
                    b.HasOne("Product.Service.Core.Domain.ProductModel", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductModelId");
                });

            modelBuilder.Entity("Product.Service.Core.Domain.ProductModel", b =>
                {
                    b.Navigation("ClientFeedbacks");

                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
